@page
@using KerykeionCmsCore.Constants
@using KerykeionCmsCore.Services
@model RegisterModel
@inject KerykeionTranslationsService TranslationService
@{
    ViewData["Title"] = await TranslationService.TranslateAsync("Register");
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="@(Model.IsAuthenticationViaExternalServicesEnabled ? "col-md-4" : "col-sm-6")">
        <form asp-route-returnUrl="@Model.ReturnUrl" method="post" enctype="multipart/form-data">
            <h4>@await TranslationService.TranslateAsync("Create a new account.")</h4>
            <hr />
            <div class="text-danger" asp-validation-summary="ModelOnly"></div>
            <div class="form-group">
                <label asp-for="Input.Username">@await TranslationService.TranslateAsync("Username")</label>
                <input id="username" asp-for="Input.Username" class="form-control" />
                <span id="validation-username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Email">@await TranslationService.TranslateAsync("Email")</label>
                <input id="email" asp-for="Input.Email" class="form-control" />
                <span id="validation-email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Language">@await TranslationService.TranslateAsync("Language")</label>
                <select id="language" asp-for="Input.Language" class="form-control" asp-items="@(new SelectList(Model.Input.Languages, "ShortLanguage", "LongLanguage"))">
                    <option selected="selected" value="">@Model.TxtSelectLanguage</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Input.Password">@await TranslationService.TranslateAsync("Password")</label>
                <input id="password" asp-for="Input.Password" class="form-control" />
                <span id="validation-password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.ConfirmPassword">@await TranslationService.TranslateAsync("Confirm Password")</label>
                <input id="confirm-password" asp-for="Input.ConfirmPassword" class="form-control" />
                <span id="validation-confirm-password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="add-profile-img-inp">@await TranslationService.TranslateAsync("Profile picture")</label><br />
                <img id="profile-pic" src="@FolderConstants.DefaultUserImagePath" class="rounded-circle cursor-pointer" height="100" width="100" data-toggle="tooltip" title="@await TranslationService.TranslateAsync("Click here to add a profile picture.")" />
                <input id="add-profile-img-inp" class="form-control d-none" type="file" asp-for="Input.ProfileImage" />
            </div>
            <button id="submit-register-form" class="btn btn-primary">@await TranslationService.TranslateAsync("Register")</button>
        </form>
    </div>
    @if (Model.IsAuthenticationViaExternalServicesEnabled)
    {
        <div class="col-md-6 col-md-offset-2">
            <section>
                <h4>Gebruik een andere dienst om te registreren.</h4>
                <hr />
                @{
                    if ((Model.ExternalLogins?.Count ?? 0) == 0)
                    {
                        <div>
                            <p>
                                Er zijn geen externe authenticatie diensten geconfigureerd. Zie <a href="https://go.microsoft.com/fwlink/?LinkID=532715">dit artikel</a>
                                voor details over hoe deze ASP.NET applicatie in te stellen om in te kunnen loggen via externe diensten.
                            </p>
                        </div>
                    }
                    else
                    {
                        <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                            <div>
                                <p>
                                    @foreach (var provider in Model.ExternalLogins)
                                    {
                                        <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in gebruikmakend van uw @provider.DisplayName account">@provider.DisplayName</button>
                                    }
                                </p>
                            </div>
                        </form>
                    }
                }
            </section>
        </div>
    }
</div>

@section Scripts {
    <script src="~/js/kerykeionvalidation.js" asp-append-version="true"></script>
    <script>
        $("#submit-register-form").on("click", function (evt) {
            evt.preventDefault();
            var valOne = false;
            var valTwo = false;
            var valThree = false;

            if (isRequiredValid("#username", "#validation-username", "@TranslationService.TranslateRequiredError(await TranslationService.TranslateAsync("Username"))")) {
                if (isStringLengthValid(4, 50, "#username", "#validation-username", "@TranslationService.TranslateStringLengthError(4, 50, await TranslationService.TranslateAsync("Username"))")) {
                    valOne = true;
                }
            }

            if (isRequiredValid("#email", "#validation-email", "@TranslationService.TranslateRequiredError(await TranslationService.TranslateAsync("Email"))")) {
                if (isEmailValid("#email", "#validation-email", "@await TranslationService.TranslateAsync("Please provide a valid email address.")")) {
                    valTwo = true;
                }
            }

            if (isRequiredValid("#password", "#validation-password", "@TranslationService.TranslateRequiredError(await TranslationService.TranslateAsync("Password"))")) {
                if (isStringLengthValid(6, 50, "#password", "#validation-password", "@TranslationService.TranslateStringLengthError(6, 50, await TranslationService.TranslateAsync("Password"))")) {
                    if (tryCompare("#confirm-password", "#password", "#validation-confirm-password", "@TranslationService.TranslateCompareValidationError(await TranslationService.TranslateAsync("Password"), await TranslationService.TranslateAsync("Confirm Password"))")) {
                        valThree = true;
                    }
                }
            }

            if (valOne && valTwo && valThree) {
                $(this).parent().submit();
            }
        });
    </script>
}
